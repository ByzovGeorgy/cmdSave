=============== 
ASSOC 
=============== 
Просмотр и изменение сопоставлений файлов.

ASSOC [.рсш[=[типФайла]]]

  .рсш      Расширение имени файла, сопоставляемое типу файлов
  типФайла  Тип файлов, сопоставляемый расширению имени файлов

Команда ASSOC без параметров выводит список сопоставлений типов файлов.
Если указано только расширение имени файла, выводится сопоставленный тип
файлов для расширения.  Если после знака равенства не указан тип файлов,
команда удалит текущее сопоставление для указанного расширения.
 
=============== 
BREAK 
=============== 
Включает или отключает расширенную обработку CTRL+C в системе DOS.

Эта команда включена для совместимости с системами DOS.
Она не оказывает никакого влияния на работу Windows.

При включении расширенной обработки команд в операционной системе Windows
команда BREAK вызывает состояние точки останова в процессе отладки программы
с помощью отладчика.
 
=============== 
CALL 
=============== 
Вызов одного пакетного файла из другого.

CALL [диск:][путь]имя_файла [параметры]

  параметры   Набор параметров командной строки, необходимых
              пакетному файлу.

Изменение команды CALL при включении расширенной обработки
команд:

Команда CALL допускает использование меток в качестве
адресата вызова. Применяется следующий синтаксис:

    CALL :метка аргументы

При вызове создается новый контекст текущего пакетного файла
с заданными аргументами, и управление передается на инструкцию,
расположенную сразу после метки.  Для выхода из такого
пакетного файла необходимо дважды достичь его конца.  Первый
выход возвращает управление на инструкцию, расположенную
сразу после строки CALL, а второй выход завершает выполнение
пакетного файла. Команда GOTO /? выводит описание
расширения GOTO :EOF, позволяющее выполнить быстрый
возврат из пакетного файла.

Кроме того, раскрытие ссылок на аргументы пакетных файлов
(%0, %1 и т.д.) изменено следующим образом:


    %* в пакетном файле обозначает все аргументы
     (например, %1 %2 %3%4 %5 ...)

    Операции подстановки параметров пакетного файла (%n)
    также расширены. Допускается применение следующих
    синтаксических конструкций:

    ~I         - переменная I раскрывается с удалением
                     обрамляющих кавычек (")
    ~fI        - переменная I раскрывается в полное имя файла
    ~dI       - переменная I раскрывается в букву диска
    ~pI       - переменная I раскрывается в путь
    ~nI       - переменная I раскрывается в имя файла
    ~xI       - переменная I раскрывается в расширение файла
    ~sI       - раскрытый путь содержит только короткие имена
    ~aI       - переменная I раскрывается в атрибуты файла
    ~tI        - переменная I раскрывается в дату/время файла
    ~zI       - переменная I раскрывается в размер файла
    ~$ПУТЬ:I   - проводится поиск по каталогам, заданным в
                     переменной среды ПУТЬ, и переменная I
                     раскрывается в полное имя первого найденного
                     файла.  Если указанная переменная среды
                     не определена или в результате поиска не найден
                     ни один файл,  то этот модификатор заменяется на
                     пустую строку.

    При объединении модификаторов получаются комбинированные
    результаты::

        %~dp1       - переменная %1 заменяется только на имя диска и путь
        %~nx1       - переменная %1 заменяется только на имя файла и его
                       расширение
        %~dp$ПУТЬ:1 - проводится поиск по каталогам, заданным в переменной
                       среды ПУТЬ, и переменная %1 заменяется на имя диска
                       и путь к первому найденному файлу.
        %~ftza1     - переменная %1 заменяется на строку, выдаваемую
                       командой DIR

    В приведенных выше примерах переменные %1 и ПУТЬ можно заменить на
    любые другие допустимые значения. Синтаксическая конструкция %~
    должна завершаться правильным номером аргумента. Модификаторы %~
    не могут использоваться вместе с оператором %*
 
=============== 
CD 
=============== 
Вывод имени либо смена текущего каталога.

CHDIR [/D] [диск:][путь]
CHDIR [..]
CD [/D] [диск:][путь]
CD [..]

  ..  обозначает переход в родительский каталог.

Команда CD диск: отображает имя текущего каталога указанного диска.
Команда CD без параметров отображает имена текущих диска и каталога.

Параметр /D используется для одновременной смены
текущих диска и каталога.

Изменение команды CHDIR при включении расширенной обработки команд:

Имя текущего каталога в строке вызова преобразуется к тому же регистру
символов, что и для существующих имен на диске.  Так, команда CD C:\TEMP
на самом деле сделает текущим каталог C:\Temp, если он существует на диске.

Команда CHDIR перестает рассматривать пробелы как разделители, что позволяет
перейти в подкаталог, имя которого содержит пробелы, не заключая все имя
каталога в кавычки.  Например:

    cd \winnt\profiles\username\programs\start menu

приводит к тому же результату, что и:

    cd "\winnt\profiles\username\programs\start menu"

При отключении расширенной обработки команд используется только второй вариант.
 
=============== 
CHDIR 
=============== 
Вывод имени либо смена текущего каталога.

CHDIR [/D] [диск:][путь]
CHDIR [..]
CD [/D] [диск:][путь]
CD [..]

  ..  обозначает переход в родительский каталог.

Команда CD диск: отображает имя текущего каталога указанного диска.
Команда CD без параметров отображает имена текущих диска и каталога.

Параметр /D используется для одновременной смены
текущих диска и каталога.

Изменение команды CHDIR при включении расширенной обработки команд:

Имя текущего каталога в строке вызова преобразуется к тому же регистру
символов, что и для существующих имен на диске.  Так, команда CD C:\TEMP
на самом деле сделает текущим каталог C:\Temp, если он существует на диске.

Команда CHDIR перестает рассматривать пробелы как разделители, что позволяет
перейти в подкаталог, имя которого содержит пробелы, не заключая все имя
каталога в кавычки.  Например:

    cd \winnt\profiles\username\programs\start menu

приводит к тому же результату, что и:

    cd "\winnt\profiles\username\programs\start menu"

При отключении расширенной обработки команд используется только второй вариант.
 
=============== 
CLS 
=============== 
Очищает содержимое экрана.

CLS
 
=============== 
COLOR 
=============== 
Установка цветов по умолчанию для переднего плана и фона в текстовых окнах.

COLOR [цвета]

  цвета       Атрибуты цветов для текстовых окон

Атрибуты цветов задаются в виде ДВУХ шестнадцатеричных цифр -- первая
задает цвет фона, а вторая определяет цвет переднего плана.  Каждая цифра может
иметь следующие значения:

    0 = Черный      8 = Серый
    1 = Синий       9 = Светло-синий
    2 = Зеленый     A = Светло-зеленый
    3 = Голубой     B = Светло-голубой
    4 = Красный     C = Светло-красный
    5 = Лиловый     D = Светло-лиловый
    6 = Желтый      E = Светло-желтый
    7 = Белый       F = Ярко-белый

Если аргумент не указан, команда восстанавливает исходный выбор цветов,
каким он был на момент запуска CMD.EXE.  Это значение извлекается из
текущего текстового окна, из значения ключа /T или из значения параметра
реестра DefaultColor.

Команда COLOR возвращает значение кода ошибки ERRORLEVEL 1 при попытке
вызова этой команды с совпадающими значениями цвета переднего плана и цвета
фона.

Пример: "COLOR fc" задает светло-красный передний план на ярко-белом фоне
 
=============== 
COPY 
=============== 
Копирование одного или нескольких файлов в другое место.

COPY [/D] [/V] [/N] [/Y | /-Y] [/Z] [/L] [/A | /B] источник [/A | /B]
     [+ источник [/A | /B] [+ ...]] [результат [/A | /B]]

  источник     Имена одного или нескольких копируемых файлов.
  /A           Файл является текстовым файлом ASCII.
  /B           Файл является двоичным файлом.
  /D           Указывает на возможность создания зашифрованного файла
  результат    Каталог и/или имя для конечных файлов.
  /V           Проверка правильности копирования файлов.
  /N           Использование, если возможно, коротких имен при копировании
               файлов, чьи имена не удовлетворяют стандарту 8.3.
  /Y           Подавление запроса подтверждения на перезапись существующего
               конечного файла.
  /-Y          Обязательный запрос подтверждения на перезапись существующего
               конечного файла.
  /Z           Копирование сетевых файлов с возобновлением.
  /L           Если источник является символической ссылкой, копирование 
               ссылки вместо реального файла, на который указывает ссылка.

Ключ /Y можно установить через переменную среды COPYCMD.
Ключ /-Y командной строки переопределяет такую установку.
По умолчанию требуется подтверждение, если только команда COPY 
не выполняется в пакетном файле.

Чтобы объединить файлы, укажите один конечный и несколько исходных файлов,
используя подстановочные знаки или формат "файл1+файл2+файл3+...".
 
=============== 
DATE 
=============== 
Вывод или изменение даты.

DATE [/T | дата]

Команда DATE без параметров отображает текущую дату и запрашивает ввод
новой даты.  Для сохранения текущей даты нажмите клавишу ENTER.

Когда расширенная обработка команд включена, команда DATE поддерживает
ключ /T, позволяющий просто вывести текущее значение даты без запроса
новой даты.
 
=============== 
DEL 
=============== 
Удаление одного или нескольких файлов.

DEL [/P] [/F] [/S] [/Q] [/A[[:]атрибуты]] имена
ERASE [/P] [/F] [/S] [/Q] [/A[[:]атрибуты]] имена

  имена         Список из одного или нескольких файлов или каталогов.
                Для удаления группы файлов можно использовать подстановочные
                знаки. Если указан каталог, будут удалены все файлы в этом
                каталоге.

  /P            Запрос подтверждения перед удалением каждого файла.
  /F            Принудительное удаление файлов, доступных только для чтения.
  /S            Удаление указанных файлов из всех подкаталогов.
  /Q            Отключение запроса на подтверждение при удалении файлов.
  /A            Отбор файлов для удаления по атрибутам.
  атрибуты      R  Файлы, доступные только для чтения.
                S  Системные файлы.
                H  Скрытые файлы.
                A  Файлы, готовые для архивирования.
                I  Файлы с неиндексированным содержимым.
                L  Точки повторной обработки.
                -  Префикс "-" имеет значение НЕ.

Изменение команд DEL и ERASE при включении расширенной обработки команд:

Результаты вывода для ключа /S принимают обратный характер, то есть выводятся
только имена удаленных файлов, а не файлов, которые не удалось найти.
 
=============== 
DIR 
=============== 
Вывод списка файлов и подкаталогов в указанном каталоге.

DIR [диск:][путь][имя файла] [/A[[:]атрибуты]] [/B] [/C] [/D] [/L] [/N]
  [/O[[:]порядок сортировки]] [/P] [/Q] [/R] [/S] [/T[[:]время]] [/W] [/X] [/4]

  [диск:][путь][имя файла]
              Диск, каталог или имена файлов для включения в список.

  /A          Отображение файлов с указанными атрибутами.
  атрибуты     D  Каталоги.            R  Файлы, доступные только для чтения.
               H  Скрытые файлы.       A  Файлы, готовые для архивирования.
               S  Системные файлы.     I  Файлы с неиндексированным содержимым.
               L  Точки повторной обработки.  -  Префикс "-" имеет значение НЕ.
  /B          Вывод только имен файлов.
  /C          Применение разделителя групп разрядов при выводе размеров файлов.
              Используется по умолчанию.  Чтобы отключить применение
              разделителя групп разрядов, задайте ключ /-C.
  /D          Вывод списка в нескольких столбцах с сортировкой по столбцам.
  /L          Использовать нижний регистр для имен файлов.
  /N          Новый формат длинного списка, имена файлов выводятся в крайнем
              правом столбце.
  /O          Сортировка списка отображаемых файлов.
  порядок      N  По имени (по алфавиту)
  сортировки   S  По размеру (начиная с минимального)
               E  По расширению (по алфавиту)
               D  По дате и времени (начиная с самого старого)
               G  Начать список с каталогов.  -  Префикс "-" обращает порядок.
  /P          Пауза после заполнения каждого экрана.
  /Q          Вывод сведений о владельце файла.
  /R          Отображение альтернативных потоков данных этого файла.
  /S          Отображение файлов из указанного каталога и всех его
              подкаталогов.
  /T          Выбор поля времени для сортировки.
  время       C  Создание.
              A  Последнее использование.
              W  Последнее изменение.
  /W          Вывод списка в несколько столбцов.
  /X          Отображение коротких имен для файлов, чьи имена не соответствуют
              стандарту 8.3. Формат аналогичен выводу с ключом /N, но короткие
              имена файлов выводятся слева от длинных. Если короткого имени у
              файла нет, вместо него выводятся пробелы.
  /4          Вывод номера года в четырехзначном формате.

Стандартный набор ключей можно записать в переменную среды DIRCMD.  Для отмены
их действия введите в команде те же ключи с префиксом "-", например: /-W.
 
=============== 
ECHO 
=============== 
Вывод сообщений и переключение режима отображения команд на экране.

  ECHO [ON | OFF]
  ECHO [сообщение]

Введите ECHO без параметра для определения текущего значения этой команды.
 
=============== 
ENDLOCAL 
=============== 
Завершение локализации изменений среды в пакетном файле. Изменения среды,
внесенные после выполнения команды ENDLOCAL, не являются локальными
относительно текущего пакетного файла; их прежние значения не будут
восстановлены по завершении этого пакетного файла.

ENDLOCAL

Изменение команды ENDLOCAL при включении расширенной обработки команд:

Если соответствующая команда SETLOCAL включила или отключила расширенную
обработку команд с помощью новых параметров ENABLEEXTENSIONS или
DISABLEEXTENSIONS, то после выполнения команды ENDLOCAL восстанавливается
состояние расширенной обработки команд, каким оно было до выполнения
команды SETLOCAL.
 
=============== 
ERASE 
=============== 
Удаление одного или нескольких файлов.

DEL [/P] [/F] [/S] [/Q] [/A[[:]атрибуты]] имена
ERASE [/P] [/F] [/S] [/Q] [/A[[:]атрибуты]] имена

  имена         Список из одного или нескольких файлов или каталогов.
                Для удаления группы файлов можно использовать подстановочные
                знаки. Если указан каталог, будут удалены все файлы в этом
                каталоге.

  /P            Запрос подтверждения перед удалением каждого файла.
  /F            Принудительное удаление файлов, доступных только для чтения.
  /S            Удаление указанных файлов из всех подкаталогов.
  /Q            Отключение запроса на подтверждение при удалении файлов.
  /A            Отбор файлов для удаления по атрибутам.
  атрибуты      R  Файлы, доступные только для чтения.
                S  Системные файлы.
                H  Скрытые файлы.
                A  Файлы, готовые для архивирования.
                I  Файлы с неиндексированным содержимым.
                L  Точки повторной обработки.
                -  Префикс "-" имеет значение НЕ.

Изменение команд DEL и ERASE при включении расширенной обработки команд:

Результаты вывода для ключа /S принимают обратный характер, то есть выводятся
только имена удаленных файлов, а не файлов, которые не удалось найти.
 
=============== 
EXIT 
=============== 
Завершает программу CMD.EXE (интерпретатор команд) или текущий пакетный
файл-сценарий.

EXIT [/B] [exitCode]

  /B          Предписывает завершить текущий пакетный файл-сценарий вместо
              завершения CMD.EXE.  Если выполняется вне пакетного
              файла-сценария, то будет завершена программа CMD.EXE

  exitCode    Указывает цифровое значение.  Если указан ключ /B, определяет
              номер для ERRORLEVEL.  В случае завершения работы CMD.EXE,
              устанавливает код завершения процесс с данным номером.
 
=============== 
FOR 
=============== 
Выполнение указанной команды для каждого файла набора.

FOR %переменная IN (набор) DO команда [параметры]

  %переменная Однобуквенный подставляемый параметр.
  (набор)      Определяет набор, состоящий из одного или нескольких
                    файлов.  Допускается использование подстановочных
                    знаков.
  команда      Команда, которую следует выполнить для каждого файла.
  параметры    Параметры и ключи для указанной команды.

В пакетных файлах для команды FOR используется запись
 %%переменная вместо %переменная. Имена переменных
 учитывают регистр букв (%i отличается от %I).

Если включена расширенная обработка команд, поддерживаются
следующие дополнительные формы команды FOR:

FOR /D %переменная IN (набор) DO команда [параметры]

    Если набор содержит подстановочные знаки, команда выполняется
    для всех подходящих имен каталогов, а не имен файлов.

FOR /R [[диск:]путь] %переменная IN (набор) DO команда [параметры]

    Выполнение команды для каталога [диск:]путь, а также для всех
    подкаталогов этого пути.  Если после ключа /R не указано имя
    каталога, используется текущий каталог. Если набор - это
    одиночный символ точки (.), команда просто перечисляет дерево каталогов.

FOR /L %переменная IN (начало,шаг,конец) DO команда [параметры]

    Набор раскрывается в последовательность чисел с заданными
    началом, концом и шагом приращения. Так, набор (1,1,5)
    раскрывается в (1 2 3 4 5), а набор (5,-1,1) - в (5 4 3 2 1)

FOR /F ["ключи"] %переменная IN (набор-файлов) DO команда [параметры]
FOR /F ["ключи"] %переменная IN ("строка") DO команда [параметры]
FOR /F ["ключи"] %переменная IN ('команда') DO команда [параметры]

    или, если использован параметр usebackq:

FOR /F ["ключи"] %переменная IN (набор-файлов) DO команда [параметры]
FOR /F ["ключи"] %переменная IN ('строка') DO команда [параметры]
FOR /F ["ключи"] %переменная IN (`команда`) DO команда [параметры]

    Набор файлов содержит имена одного или нескольких файлов,
    которые по очереди открываются, читаются и обрабатываются.
    Обработка состоит в чтении файла, разбивке его на отдельные
    строки текста и разборе каждой строки в ноль или более подстрок.
    Затем вызывается тело цикла "for", при выполнении которого
    каждая найденная подстрока используется в качестве значения
    переменной. По умолчанию ключ /F выделяет из каждой строки
    каждого файла первую отделенную пробелами подстроку. Пустые
    строки в файле пропускаются. Необязательный параметр "ключи"
    служит для переопределения правил разбора по умолчанию. Он
    представляет собой заключенную в кавычки строку, содержащую
    одно или несколько ключевых слов для определения параметров
    разбора. Ключевые слова:

        eol=c           - знак начала комментария в конце строки
                          (допускается задание только одного знака).
        skip=n          - число пропускаемых при обработке строк в начале
                          файла.
        delims=xxx      - набор разделителей вместо используемых по умолчанию
                          пробела и знака табуляции.
        tokens=x,y,m-n  - номера подстрок из каждой строки, передаваемые в тело
                          цикла "for" для каждой итерации. При использовании
                          этого ключа выделяются дополнительные имена
                          переменных. Формат m-n представляет собой диапазон
                          подстрок с номерами от m по n. Если последний знак
                          в строке tokens= является звездочкой, создается
                          дополнительная переменная, значением которой будет
                          весь оставшийся текст в строке после разбора
                          последней подстроки.
        usebackq        - применение новой семантики, при которой строка,
                          заключенная в обратные кавычки, выполняется как
                          команда, строка, заключенная в прямые одиночные
                          кавычки, является строкой-литералом, а двойные
                          кавычки могут использоваться для задания имен
                          файлов в наборе.


  Поясняющий пример:

FOR /F "eol=; tokens=2,3* delims=, " %i in (мойфайл.txt) do @echo %i %j %k

    разбирает файл myfile.txt, пропуская все строки, которые
    начинаются с символа точки с запятой, и передает вторую и
    третью подстроки из каждой строки в тело цикла "for", причем
    подстроки разделяются запятыми и/или пробелами.
    В теле цикла переменная %i используется для второй
    подстроки, %j - для третьей, а %k получает все оставшиеся
    подстроки после третьей. Имена файлов, содержащие пробелы,
    необходимо заключать в двойные кавычки. Чтобы использовать
    двойные кавычки, необходимо использовать параметр usebackq,
    иначе двойные кавычки будут восприняты как определение
    строки-литерала для разбора.

    Переменная %i явно объявлена в инструкции "for", а переменные
    %j и %k объявляются неявно с помощью ключа tokens=.
    Ключ tokens= позволяет извлечь из одной строки файла до
    26 подстрок, при условии, что это не приведет к попытке
    объявить переменную после буквы "z" или "Z". Следует помнить,
    что имена переменных FOR являются однобуквенными,
    с учетом регистра, глобальными, поэтому одновременно
    не может быть активно более 52 переменных.

    Логику разбора команды FOR /F можно также использовать
    на явно заданной строке, заключив ее в одиночные кавычки и
    указав ее в качестве параметра в скобках. Она будет разобрана
    как одиночная строка из входного файла.

    Наконец, команда FOR /F позволяет разобрать выходные
    данные другой команды. Для этого следует использовать
    в качестве параметра в скобках строку в обратных одиночных
    кавычках. Эта строка передается для выполнения дочернему
    обработчику команд CMD.EXE, а вывод этой команды
    сохраняется в памяти и разбирается так, как если бы это
    был файл. Следующий пример,

    FOR /F "usebackq delims==" %i IN (`set`) DO @echo %i,

    выведет перечень имен всех переменных среды в текущей
    среде.

Операции подстановки ссылок на переменные команды FOR
также расширены. Допускается применение следующих
синтаксических конструкций:

    %~I         - из переменной %I удаляются обрамляющие кавычки (")
    %~fI        - переменная %I расширяется до полного имени файла
    %~dI        - из переменной %I выделяется только имя диска
    %~pI        - из переменной %I выделяется только путь к файлу
    %~nI        - из переменной %I выделяется только имя файла
    %~xI        - из переменной %I выделяется расширение имени файла
    %~sI        - полученный путь содержит только короткие имена
    %~aI        - переменная %I расширяется до атрибутов файла
    %~tI        - переменная %I расширяется до даты /времени файла
    %~zI        - переменная %I расширяется до размера файла
    %~$ПУТЬ:I   - проводится поиск по каталогам, заданным в
                         переменной среды ПУТЬ, и переменная %I
                         заменяется на полное имя первого найденного
                         файла.  Если переменная ПУТЬ не определена или
                          в результате поиска не найден ни один файл,
                          то этот модификатор заменяется на пустую
                          строку.

При объединении нескольких операторов можно получить
следующие результаты:

    ~dpI       - переменная I раскрывается в имя диска и путь
    ~nxI       - переменная I раскрывается в имя файла и его
                       расширение
    ~fsI        - переменная I раскрывается в полный путь с
                       короткими именами
    ~dp$ПУТЬ:I - проводится поиск по каталогам, заданным в
                       переменной среды ПУТЬ, и переменная I
                       раскрывается в имя диска и путь к первому
                       найденному файлу.
    ~ftzaI     - переменная I раскрывается в строку, подобную
                       выдаваемой командой DIR


В приведенных выше примерах переменные I и ПУТЬ можно
заменить на другие допустимые значения. Синтаксическая
конструкция с символами ~ заканчивается допустимым именем
переменной цикла FOR.
Для имен переменных рекомендуется использовать заглавные
буквы, например, I, что делает эту конструкцию более удобной
для чтения и предотвращает ошибочное принятие их за
модификаторы, которые не различают регистр.
 
=============== 
FTYPE 
=============== 
Просмотр и изменение типов файлов, сопоставленных с расширением имен файлов

FTYPE [типФайлов[=[команднаяСтрокаОткрытия]]]

  типФайлов                 Тип файлов для просмотра или изменения
  команднаяСтрокаОткрытия   Команда, используемая для открытия файлов
                            указанного типа.

Команда FTYPE без параметров выводит текущий список типов файлов, для которых
определены командные строки открытия. Если указан только тип файла, FTYPE
выводит командную строку открытия для этого типа файлов. Если после знака
равенства не указана строка открытия, FTYPE удалит текущее сопоставление для
указанного типа файлов. При вызове командной строки переменные %0
и %1 заменяются на имя файла, запускаемого с помощью сопоставления.
Вместо переменной %* подставляются все параметры, а переменные %2, %3
и т.д. заменяются, соответственно, на первый, второй и другие параметры.
Вместо переменной %~n подставляются все оставшиеся параметры, начиная с n,
где n является числом от 2 до 9.  Например:

    ASSOC .pl=PerlScript
    FTYPE PerlScript=perl.exe %1 %*

Эти команды позволят вызывать обработчик команд Perl следующим образом:

    script.pl 1 2 3

Если желательно избежать постоянного ввода расширения имен файлов, введите
следующую команду:

    set PATHEXT=.pl;%PATHEXT%

Теперь обработчик команд вызывается еще проще:

    script 1 2 3
 
=============== 
GOTO 
=============== 
Передача управления содержащей метку строке пакетного файла.

GOTO метка

  метка   Строка пакетного файла, оформленная как метка.

Метка должна находиться в отдельной строке и начинаться с двоеточия.

Изменение команды GOTO при включении расширенной обработки команд:

Команда GOTO принимает в качестве метки перехода строку :EOF, которая вызывает
передачу управления в конец текущего пакетного файла.  Это позволяет легко
выйти из пакетного файла без определения каких-либо меток.  Команда CALL /?
выводит описание расширенных возможностей команды CALL, делающих эту функцию
особенно полезной.
 
=============== 
IF 
=============== 
Оператор условного выполнения команд в пакетном файле.

IF [NOT] ERRORLEVEL число команда
IF [NOT] строка1==строка2 команда
IF [NOT] EXIST имя_файла команда

  NOT               Указывает, что Windows должна выполнить
                    эту команду, только если условие является ложным.

  ERRORLEVEL число  Условие является истинным, если код возврата последней
                    выполненной программы не меньше указанного числа.
 

  строка1==строка2  Условие является истинным, если указанные строки совпадают.
 

  EXIST имя_файла   Условие является истинным, если файл с указанным
                    именем существует.

  команда           Задает команду, выполняемую при истинности условия.
                    За этой командой может следовать ключевое слово ELSE
                    В случае, если указанное условие ложно,
                    будет выполнена команда, находящаяся после слова ELSE.

Предложение ELSE должно располагаться в той же строке, что и команда, следующая
за ключевым словом IF. Например:

    IF EXIST имя_файла. (
        del имя_файла.
    ) ELSE (
        echo имя_файла. missing.
    )

Следующий пример содержит ОШИБКУ, поскольку команда del должна заканчиваться
переходом на новую строку:

    IF EXIST имя_файла. del имя_файла. ELSE echo имя_файла. missing

Следующий пример также содержит ОШИБКУ, поскольку команда ELSE должна
располагаться в той же строке, что и команда, следующая за IF:

    IF EXIST имя_файла. del имя_файла.
    ELSE echo имя_файла. missing

Вот правильный пример, где все команды расположены в одной строке:

    IF EXIST имя_файла. (del имя_файла.) ELSE echo имя_файла. missing

Изменение команды IF при включении расширенной обработки команд:

    IF [/I] строка1 оператор_сравнения строка2 команда
    IF CMDEXTVERSION число команда
    IF DEFINED переменная команда

где оператор_сравнения принимает следующие значения:

    EQL - равно
    NEQ - не равно
    LSS - меньше
    LEQ - меньше или равно
    GTR - больше
    GEQ - больше или равно,

а ключ /I, если он указан, задает сравнение текстовых строк без учета
регистра.  Ключ /I можно также использовать и в форме строка1==строка2
команды IF.  Сравнения проводятся по общему типу данных, так что если
строки 1 и 2 содержат только цифры, то обе строки преобразуются в числа,
после чего выполняется сравнение чисел.

Условие CMDEXTVERSION применяется подобно условию ERRORLEVEL, но значение
сравнивается с внутренним номером версии текущей реализации расширенной
обработки команд. Первая версия имеет номер 1. Номер версии будет
увеличиваться на единицу при каждом добавлении существенных возможностей
расширенной обработки команд. Если расширенная обработка команд отключена,
условие CMDEXTVERSION никогда не бывает истинно.

Условие DEFINED применяется подобно условию EXIST, но принимает в качестве
аргумента имя переменной среды и возвращает истинное значение, если эта
переменная определена.

Строка %ERRORLEVEL% будет развернута в строковое представление текущего
значения кода ошибки ERRORLEVEL, за исключением ситуации, когда уже имеется
переменная среды с именем ERRORLEVEL; в подобном случае подставляется
значение этой переменной. Например, с помощью данной строки можно выполнить
следующее:

    goto answer%ERRORLEVEL%
    :answer0
    echo Получен код возврата 0
    :answer1
    echo Получен код возврата 1

Допускается и применение описанных выше операторов числового сравнения:

    IF %ERRORLEVEL% LEQ 1 goto okay

Строка %CMDCMDLINE% будет развернута в исходную командную строку, переданную
CMD.EXE до любой обработки, за исключением ситуации, когда уже определена
переменная среды с именем CMDCMDLINE; в подобном случае подставляется
значение этой переменной.

Строка %CMDEXTVERSION% будет развернута в строку, представляющую собой
текущее значение CMDEXTVERSION, за исключением ситуации, когда уже имеется
переменная среды с именем CMDEXTVERSION; в подобном случае подставляется
значение этой переменной.
 
=============== 
MD 
=============== 
Создание каталога.

MKDIR [диск:]путь
MD [диск:]путь

Изменение команды MKDIR при включении расширенной обработки команд:

Команда MKDIR создает при необходимости все промежуточные каталоги в пути.
Например, если \a не существует, то:

    mkdir \a\b\c\d

приводит к тому же результату, что и:

    mkdir \a
    chdir \a
    mkdir b
    chdir b
    mkdir c
    chdir c
    mkdir d

При отключении расширенной обработки команд используется только второй вариант.
 
=============== 
MKDIR 
=============== 
Создание каталога.

MKDIR [диск:]путь
MD [диск:]путь

Изменение команды MKDIR при включении расширенной обработки команд:

Команда MKDIR создает при необходимости все промежуточные каталоги в пути.
Например, если \a не существует, то:

    mkdir \a\b\c\d

приводит к тому же результату, что и:

    mkdir \a
    chdir \a
    mkdir b
    chdir b
    mkdir c
    chdir c
    mkdir d

При отключении расширенной обработки команд используется только второй вариант.
 
=============== 
MKLINK 
=============== 
Создание символической ссылки.

MKLINK [[/D] | [/H] | [/J]] Ссылка Назначение

        /D          Создание символической ссылки на каталог.
                    По умолчанию создается символическая ссылка на файл.
        /H          Создание жесткой связи вместо символической ссылки.
        /J          Создание соединения для каталога.
        Ссылка      Имя новой символической ссылки.
        Назначение  Путь (относительный или абсолютный), на который ссылается
                    новая ссылка.
 
=============== 
MOVE 
=============== 
Перемещение файлов и переименование файлов и папок

Перемещение одного или более файлов:
MOVE [/Y | /-Y] [диск:][путь]имя_файла1[,...] назначение

Переименование папки:
MOVE [/Y | /-Y] [диск:][путь]имя_папки новое_имя_папки

  [диск:][путь]имя_файла1 Определяет местоположение файла или файлов, которые
                          необходимо переместить.
  Назначение              Определяет новое местоположение файла. Назначение
                          может состоять из буквы диска (с последующим
                          двоеточием), имени папки или их комбинации. При
                          перемещении только одного файла, можно указать и его
                          новое имя, если хотите выполнить его одновременное 
                          переименование при перемещении.
  [диск:][путь]имя_папки  Определяет папку, которую необходимо переименовать.
  новое_имя_папки         Определяет новое имя папки.

  /Y                      Перезаписывать существующие файлы назначения без
                          предупреждения.
  /-Y                     Предупреждать при перезаписи существующего файла
                          назначения.

Ключ /Y может присутствовать в значении переменной среды окружения COPYCMD.
Оно может перекрываться ключом /-Y в командной строке. По умолчанию
используется предупреждение о перезаписи, если только команда MOVE не
выполняется как часть пакетного файла.
 
=============== 
PATH 
=============== 
Вывод или задание пути поиска исполняемых файлов.

PATH [[диск:]путь[;...][;%PATH%]
PATH ;

Команда PATH ; очищает путь поиска используемых файлов, ограничив его
текущим каталогом.
Команда PATH без параметров отображает текущий путь поиска.
При включении в командную строку переменной %PATH% прежний путь поиска
добавляется в конец нового.
 
=============== 
PAUSE 
=============== 
Приостановка выполнения пакетного файла и вывод сообщения:
    Для продолжения нажмите любую клавишу . . .  
=============== 
POPD 
=============== 
Переходит в каталог, сохраненный командой PUSHD.

POPD


Когда расширенная обработка команд включена, команда POPD удаляет временные
имена дисков, созданные командой PUSHD для сетевых ресурсов, при удалении
соответствующего диска из стека каталогов.
 
=============== 
PROMPT 
=============== 
Изменение приглашения командной строки cmd.exe.

PROMPT [текст]

  текст   Новое приглашение командной строки.

Приглашение может включать обычные символы и следующие коды:

  $A   & (амперсанд)
  $B   | (вертикальная черта)
  $C   ( (левая круглая скобка)
  $D   Текущая дата
  $E   ESC (символ ASCII с кодом 27)
  $F   ) (правая круглая скобка)
  $G   > (знак "больше")
  $H   BACKSPACE (удаление предыдущего символа)
  $L   < (знак "меньше")
  $N   Текущий диск
  $P   Текущие диск и каталог
  $Q   = (знак равенства)
  $S     (пробел)
  $T   Текущее время
  $V   Номер версии Windows
  $_   Возврат каретки и перевод строки
  $$   $ (символ доллара)

Когда расширенная обработка команд включена, команда PROMPT поддерживает
следующие дополнительные символы форматирования:

  $+   Отображение нужного числа знаков плюс (+) в зависимости от текущей
       глубины стека каталогов PUSHD, по одному знаку на каждый сохраненный
       путь.

  $M   Отображение полного имени удаленного диска, связанного с именем
       текущего диска, или пустой строки, если текущий диск не является
       сетевым.
 
=============== 
PUSHD 
=============== 
Сохраняет текущий каталог для использования командой POPD, а затем
переходит в указанный каталог.

PUSHD [путь | ..]

  путь        Каталог, который следует назначить текущим.

Когда расширенная обработка команд включена, команда PUSHD допускает ввод
сетевых путей в дополнение к обычным именам дисков и путям.
Если указан сетевой путь, команда PUSHD создает временное имя диска,
указывающее на заданный сетевой ресурс, а затем производит смену текущего
диска и каталога, используя вновь определенное имя диска.
Выделение временных имен дисков проводится в обратном порядке начиная
с Z:, причем выбирается первое свободное имя диска.
 
=============== 
RD 
=============== 
Удаление каталога.

RMDIR [/S] [/Q] [диск:]путь
RD [/S] [/Q] [диск:]путь

    /S      Удаление дерева каталогов, т. е. не только указанного каталога,
            но и всех содержащихся в нем файлов и подкаталогов.

    /Q      Отключение запроса подтверждения при удалении дерева каталогов
            с помощью ключа /S.
 
=============== 
REM 
=============== 
Помещение комментариев в пакетные файлы и файл CONFIG.SYS.

REM [текст]
 
=============== 
REN 
=============== 
Переименование одного или нескольких файлов.

RENAME [диск:][путь]имя_файла1 имя_файла2.
REN [диск:][путь]имя_файла1 имя_файла2.

Для конечного файла нельзя указать другой диск или каталог.
 
=============== 
RENAME 
=============== 
Переименование одного или нескольких файлов.

RENAME [диск:][путь]имя_файла1 имя_файла2.
REN [диск:][путь]имя_файла1 имя_файла2.

Для конечного файла нельзя указать другой диск или каталог.
 
=============== 
RMDIR 
=============== 
Удаление каталога.

RMDIR [/S] [/Q] [диск:]путь
RD [/S] [/Q] [диск:]путь

    /S      Удаление дерева каталогов, т. е. не только указанного каталога,
            но и всех содержащихся в нем файлов и подкаталогов.

    /Q      Отключение запроса подтверждения при удалении дерева каталогов
            с помощью ключа /S.
 
=============== 
SET 
=============== 
Вывод, задание и удаление переменных среды cmd.exe.

SET [переменная=[строка]]

  переменная  Имя переменной среды.
  строка      Строка символов, присваиваемая указанной переменной.

Введите SET без параметров для вывода текущих переменных среды.

Изменение команды SET при включении расширенной обработки команд:

Если при вызове указать только имя переменной без знака равенства и значения,
команда SET выведет значения всех переменных, имя которых начинается
с указанной строки.  Например:

    SET P

Эта команда выведет значения всех переменных, имена которых начинаются с 'P'.

Если имя переменной не найдено в текущей среде, при возврате команда SET
установит значение ошибки ERRORLEVEL 1.

Команда SET не допускает использование знака равенства в имени 
переменной среды.

Команда SET поддерживает два дополнительных ключа:

    SET /A выражение
    SET /P variable=[promptString]

Ключ /A указывает, что строка справа от знака равенства является числовым
выражением, значение которого вычисляется.  Обработчик выражений очень
прост и поддерживает следующие операции, перечисленные в порядке убывания
приоритета:

    ()                  - группировка
    ! ~ -               - унарные операторы
    * / %              - арифметические операторы
    + -                 - арифметические операторы
    << >>               - двоичный сдвиг
    &                   - двоичное И
    ^                   - двоичное исключающее ИЛИ
    |                   - двоичное ИЛИ
    = *= /= %= += -=    - присвоение
      &= ^= |= <<= >>=
    ,                   - разделитель операторов

При использовании любых логических или двоичных операторов необходимо
заключить строку выражения в кавычки.  Любые нечисловые строки в выражении
рассматриваются как имена переменных среды, значения которых преобразуются
в числовой вид перед использованием.  Если переменная с указанным именем
не определена в системе, вместо нее подставляется нулевое значение.  Это
позволяет выполнять арифметические операции со значениями переменных среды,
причем не нужно вводить знаки % для получения значений.  Если команда
SET /A вызывается из командной строки, а не из пакетного файла, она выводит
окончательное значение выражения.  Слева от любого оператора присваивания
должно стоять имя переменной среды.  Числовые значения рассматриваются как
десятичные, если перед ними не стоит префикс 0x для шестнадцатеричных чисел,
и 0 для восьмеричных чисел.  Например, числа 0x12,
и 022 обозначают десятичное число 18.  Обратите внимание на запись
восьмеричных числе: 08 и 09 не являются допустимыми числами, так как в
восьмеричной системе исчисления цифры 8 и 9 не используются.

Ключ /P позволяет установить значение переменной для входной строки, введенной
пользователем.  Показывает указанное приглашение promptString перед чтением
введенной строки.  Приглашение promptString может быть пустым.

Подстановка переменной среды может быть расширена следующим образом:

    %PATH:str1=str2%

расширит действие переменной среды PATH, заменяя каждое вхождение "str1" в
расширенном результате на "str2".  "str2" может быть пустой строкой для
эффективного удаления вхождений "str1" из расширенного вывода. "str1" может
начинаться со звездочки, и в этом случае это будет соответствовать любому
началу расширенного вывода до первого вхождения оставшейся части "str1".


Можно также использовать строки расширения.

    %PATH:~10,5%

расширит действие переменной среды PATH, затем использует только 5
символов, которые начинаются с 11-го символа (пропустив 10) расширенного
результата.  Если длина не указана, по умолчанию используется оставшееся
значение переменной.  Если оба значения (длина и число пропускаемых символов)
отрицательны, следующим используемым значением будет длина значения переменной
среды, добавленной к указанному значению пропуска или указанной длины.

    %PATH:~-10%

извлечет последние 10 символов переменной PATH.

    %PATH:~0,-2%

извлечет все символы переменной PATH, за исключением 2-х последних.

Наконец, добавлена поддержка связывания времени выполнения для переменных среды
окружения. По умолчанию эта поддержка отключена. Ключ /V командной строки
CMD.EXE позволяет включать и выключать ее. Для вызова справки, наберите CMD /?

Связывание времени выполнения для переменных среды окружения полезно при обходе
ограничений раннего связывания, которое происходит при первом чтении текстовой
строки, а не при ее выполнении. Следующий пример демонстрирует возникающую
проблему при использовании раннего связывания переменных:

    set VAR=before
    if "%VAR%" == "before" (
        set VAR=after
        if "%VAR%" == "after" @echo Тело внутреннего оператора сравнения
    )

Данное сообщение не будет выводиться, т.к. %VAR% в ОБОИХ выражениях IF
подставляется в момент первого использования в первом IF, в том числе и в тело
первого ветвления IF, которое является составным выражением. В IF внутри
составного выражения в действительности сравниваются значения "before" и
"after", что заведомо ложно. Следующий пример демонстрирует подобную ошибку:

    set LIST=
    for %i in (*) do set LIST=%LIST% %i
    echo %LIST%

в данном случае список файлов текущей папки никогда не будет построен. Вместо
этого, значением переменной LIST будет имя последнего найденного файла.
И вновь, это случилось потому, что %LIST% подставляется всего один раз -
в момент обработки выражения FOR, когда список еще пуст.
Фактически, приведенный фрагмент эквивалентен следующему примеру:

    for %i in (*) do set LIST= %i

в котором имя последнего найденного файла сохраняется в переменной LIST.

Связывание времени выполнения для переменных среды окружения происходит при
использовании специального символа (восклицательного знака), обозначающего
проведение сопоставления во время выполнения. Если включена поддержка
связывания времени выполнения, то для достижения ожидаемых результатов
приведенные выше фрагменты должны быть изменены следующим образом:

    set VAR=before
    if "%VAR%" == "before" (
        set VAR=after
        if "!VAR!" == "after" @echo Тело внутреннего оператора сравнения
    )

    set LIST=
    for %i in (*) do set LIST=!LIST! %i
    echo %LIST%

При включенной расширенной обработке команд доступны несколько переменных
среды, которые расширяются, но не отображаются в списке при вызове команды SET.
Значения этих переменных вычисляются динамически каждый раз при их извлечении.
Если пользователь явно задает переменные с одним из этих имен,
то это определение переопределяет соответствующее динамическое определение,
описанное ниже:

%CD% - заменяется строкой текущего каталога.

%DATE% - заменяется текущей датой с форматом команды DATE.

%TIME% - заменяется текущей датой с форматом команды TIME.

%RANDOM% - заменяется случайным десятичным числом в диапазоне от 0 до 32767.

%ERRORLEVEL% - заменяется текущим значением ERRORLEVEL

%CMDEXTVERSION% - заменяется текущим значением версии 
                    расширенной обработки команд.

%CMDCMDLINE% - заменяется исходной командной строкой, которая вызвала
командный процессор.

%HIGHESTNUMANODENUMBER% - заменяется максимальным номером узла NUMA
    на этом компьютере.
 
=============== 
SETLOCAL 
=============== 
Начало локализации изменений среды в пакетном файле. Изменения среды,
внесенные после выполнения команды SETLOCAL, являются локальными
относительно текущего пакетного файла. Для восстановления их прежних
значений необходимо выполнить команду ENDLOCAL. При достижении
конца пакетного файла автоматически выполняется команда ENDLOCAL для
всех действующих команд SETLOCAL, выполненных в этом пакетном файле.

SETLOCAL

Изменение команды SETLOCAL при включении расширенной обработки команд:

Команда SETLOCAL принимает необязательные аргументы:
        ENABLEEXTENSIONS / DISABLEEXTENSIONS
            Это позволяет включить или отключить расширенную обработку команд.
            Эти аргументы переопределяют параметры CMD /E:ON или /E:OFF. Для
            получения дополнительных сведений введите CMD /?.
        ENABLEDELAYEDEXPANSION и DISABLEDELAYEDEXPANSION
            включают или отключают отложенное расширение переменных среды. Эти
            аргументы переопределяют параметры CMD /V:ON или /V:OFF. Для
            получения дополнительных сведений введите CMD /?.
Эти изменения действуют до выполнения соответствующей команды ENDLOCAL,
независимо от их настройки до команды SETLOCAL.

Если команда SETLOCAL вызывается с аргументом, она  устанавливает значение
ERRORLEVEL.  Если указан один из двух допустимых аргументов, это значение будет
равно нулю, в противном случае возвращается единица.  Эту команду можно
использовать в пакетных файлах, чтобы определить доступность расширенной
обработки команд, следующим образом:

    VERIFY OTHER 2>nul
    SETLOCAL ENABLEEXTENSIONS
    IF ERRORLEVEL 1 echo Не удается включить расширенную обработку

Эта последовательность команд работает, так как в прежних версиях CMD.EXE
команда SETLOCAL НЕ устанавливала значение ERRORLEVEL. Команда VERIFY с
недопустимым аргументом необходима для установки ненулевого значения
ERRORLEVEL.
 
=============== 
SHIFT 
=============== 
Изменение содержимого (сдвиг) подставляемых параметров для пакетного файла.

SHIFT [/n]

Команда SHIFT при включении расширенной обработки команд поддерживает ключ
/n, задающий начало сдвига параметров с номера n, где n может быть от 0 до 9.
Например, в следующей команде:

    SHIFT /2

%3 заменяется на %2, %4 на %3 и т.д., а %0 и %1 остаются без изменений.
 
=============== 
START 
=============== 
Запуск указанной программы или команды в отдельном окне.

START ["заголовок"] [/D путь] [/I] [/MIN] [/MAX] [/SEPARATE | /SHARED]
      [/LOW | /NORMAL | /HIGH | /REALTIME | /ABOVENORMAL | /BELOWNORMAL]
      [/NODE <узел NUMA>] [/AFFINITY <маска сходства>] [/WAIT] [/B]
      [команда/программа] [параметры]

    "заголовок" Заголовок окна.
    путь        Исходный каталог.
    B           Запуск приложения без создания нового окна с отключением
                обработки сочетания клавиш ^C. Если приложение не
                обрабатывает сочетание клавиш ^C самостоятельно,
                единственным способом его прерывания является
                использование сочетания клавиш ^Break.
    I           Новой средой станет исходная среда, переданная
                cmd.exe, а не текущая среда.
    MIN         Запуск команды/программы в свернутом окне.
    MAX         Запуск команды/программы в развернутом окне.
    SEPARATE    Запуск 16-разрядной программы Windows в отдельной
                области памяти.
    SHARED      Запуск 16-разрядной программы Windows в общей
                области памяти.
    LOW         Запуск приложения с приоритетом IDLE.
    NORMAL      Запуск приложения с приоритетом NORMAL.
    HIGH        Запуск приложения с приоритетом HIGH.
    REALTIME    Запуск приложения с приоритетом REALTIME.
    ABOVENORMAL Запуск приложения с классом приоритета ABOVENORMAL
    BELOWNORMAL Запуск приложения с классом приоритета BELOWNORMAL
    NODE        Указывает предпочтительный узел NUMA
                в качестве десятичного целого числа.
    AFFINITY    Содержит маску сходства процессора в виде шестнадцатеричного
                числа. Процесс будет выполняться только на этих процессорах.

                Маска сходства интерпретируется по-разному при совмещении
                параметров /AFFINITY и /NODE. Укажите маску сходства таким
                образом, как если бы маска процессора узла NUMA сдвинута вправо
                и начинается на нулевом бите.
                Выполнение этих процессов ограничено процессорами,
                общими для указанной маски сходства и узла NUMA.
                Если общих процессоров не существует, то выполнение
                процесса ограничено указанным узлом NUMA.
    WAIT        Запуск приложения с ожиданием его завершения.
    команда/программа
                Если это внутренняя команда cmd.exe или пакетный файл,
                обработчик команд (cmd.exe) запускается с ключом /K.
                Это означает, что окно не будет закрыто после завершения
                команды.

                Если это не внутренняя команда cmd.exe и не пакетный файл,
                значит, это программа, которая будет запущена в графическом
                или текстовом окне.

    параметры   Параметры, передаваемые команде/программе.

Примечание: параметры SEPARATE и SHARED не поддерживаются на 64-разрядных
платформах.

Указание параметра /NODE позволяет создавать процессы таким образом, чтобы
использовать память в системах NUMA. Например, два процесса, которые
взаимодействуют друг с другом через общую память, могут совместно использовать
один и тот же предпочтительный узел NUMA для минимизации задержки памяти.
Память выделается из одного узле NUMA по возможности, что позволяет процессам
выполняться на процессорах вне указанного узла.

    start /NODE 1 application1.exe
    start /NODE 1 application2.exe

Эти процессы можно ограничить для выполнения на определенных процессорах в
одном узле NUMA.  В следующем примере приложение application1 выполняется
на низкоприоритетных процессорах узла, а приложение application2 выполняется
на двух следующих процессорах узла.  В этом примере предполагается, что
указанный узел имеет минимум четыре логических процессора.  Обратите внимание
на то, что номер узла можно изменить на другой действительный номер для
компьютера без изменения маски сходства.

    start /NODE 1 /AFFINITY 0x3 application1.exe
    start /NODE 1 /AFFINITY 0xc application2.exe

Изменения вызова внешних команд из командной строки или с помощью команды
START при включении расширенной обработки команд:

Для вызова неисполняемых файлов через механизм сопоставления типов файлов
    достаточно просто ввести имя файла в командной строке.  Например, команда
    WORD.DOC запускает приложение, сопоставленное расширению имени файла .DOC.
    Сведения о создании подобных сопоставлений из пакетных файлов приведены
    в описаниях команд ASSOC и FTYPE.

При запуске 32-разрядного приложения с графическим интерфейсом пользователя
    обработчик команд CMD.EXE не ожидает завершения работы приложения перед
    возвратом к приглашению командной строки.  Подобное новое поведение НЕ
    относится к запуску приложений из пакетных файлов.

При выполнении командной строки, первым элементом которой является текстовая
    строка "CMD" без расширения имени файла или указания пути, она заменяется
    значением переменной COMSPEC. Это предотвращает запуск CMD.EXE из
    текущей активной папки, если таковая программа там имеется.

Если первый элемент командной строки не содержит расширения имени файла,
    обработчик команд CMD.EXE использует значение переменной среды PATHEXT,
    чтобы определить расширения имен исполняемых файлов и порядок поиска
    нужного файла.  По умолчанию для переменной PATHEXT задается
    значение:

        .COM;.EXE;.BAT;.CMD

    Обратите внимание, что этот синтаксис подобен синтаксису для переменной
    PATH, то есть отдельные элементы разделяются точкой с запятой.

Если при поиске исполняемого файла нет соответствия ни одному из расширений, 
выполняется проверка соответствия указанного имени папки. Если имя папки
соответствует указанному, то команда START запускает EXPLORER для этого
пути. Если такое действие выполняется из командной строки, то оно
эквивалентно выполнению команды CD /D для указанного пути.
 
=============== 
TIME 
=============== 
Вывод или изменение времени.

TIME [/T | время]

Введите TIME без параметров для вывода текущего времени и запроса на ввод
нового времени.  Нажмите клавишу ENTER для сохранения текущего времени.

Когда расширенная обработка команд включена, команда TIME поддерживает
ключ /T, позволяющий просто вывести текущее значение времени без запроса
нового времени.
 
=============== 
TITLE 
=============== 
Изменение заголовка окна командной строки.

TITLE [строка]

  строка       Будущий заголовок окна командной строки.
 
=============== 
TYPE 
=============== 
Вывод содержимого одного или нескольких текстовых файлов.

TYPE [диск:][путь]имя_файла
 
=============== 
VER 
=============== 
Вывод версии Windows.

VER
 
=============== 
VERIFY 
=============== 
Включение или отключение режима проверки правильности записи файлов
на диск.

VERIFY [ON | OFF]

Введите VERIFY без параметра для определения текущего значения этой команды.
 
=============== 
VOL 
=============== 
Вывод метки и серийного номера тома для диска.

VOL [диск:]
 
